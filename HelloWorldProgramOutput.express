#2=attribute("xmlns:xsd","http://www.w3.org/2001/XMLSchema-instance")
#3=attribute("profile","Immersive")
#4=attribute("version","3.3")
#5=attribute("xsd:noNamespaceSchemaLocation","http://www.web3d.org/specifications/x3d-3.3.xsd")
#8=attribute("name","Navigation")
#9=attribute("level","3")
#7=component(#8,#9)
#11=attribute("name","Layering")
#12=attribute("level","1")
#10=component(#11,#12)
#14=attribute("name","AngleUnitConversion")
#15=attribute("category","angle")
#16=attribute("conversionFactor","1.0")
#13=unit(#14,#15,#16)
#18=attribute("name","LengthUnitConversion")
#19=attribute("category","length")
#20=attribute("conversionFactor","1.0")
#17=unit(#18,#19,#20)
#22=attribute("name","title")
#23=attribute("content","HelloWorldProgramOutput.x3d")
#21=meta(#22,#23)
#25=attribute("name","description")
#26=attribute("content","Example HelloWorldProgram creates an X3D model using the X3D Java Scene Access Interface (SAI) Library")
#24=meta(#25,#26)
#28=attribute("name","reference")
#29=attribute("content","http://www.web3d.org/specifications/java/X3DJSAIL.html")
#27=meta(#28,#29)
#31=attribute("name","generator")
#32=attribute("content","HelloWorldProgramOutput.java")
#30=meta(#31,#32)
#34=attribute("name","created")
#35=attribute("content","6 September 2016")
#33=meta(#34,#35)
#37=attribute("name","modified")
#38=attribute("content","31 January 2018")
#36=meta(#37,#38)
#40=attribute("name","generator")
#41=attribute("content","X3D Java Scene Access Interface Library (X3DJSAIL)")
#39=meta(#40,#41)
#43=attribute("name","generator")
#44=attribute("content","http://www.web3d.org/specifications/java/examples/HelloWorldProgram.java")
#42=meta(#43,#44)
#46=attribute("name","generator")
#47=attribute("content","Netbeans http://www.netbeans.org")
#45=meta(#46,#47)
#49=attribute("name","creator")
#50=attribute("content","Don Brutzman")
#48=meta(#49,#50)
#52=attribute("name","reference")
#53=attribute("content","https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/x3d/stylesheets/java/examples/HelloWorldProgramOutput.x3d")
#51=meta(#52,#53)
#55=attribute("name","reference")
#56=attribute("content","Console output, ClassicVRML encoding, VRML97 encoding and pretty-print documentation:")
#54=meta(#55,#56)
#58=attribute("name","reference")
#59=attribute("content","HelloWorldProgramOutput.txt")
#57=meta(#58,#59)
#61=attribute("name","reference")
#62=attribute("content","HelloWorldProgramOutput.x3dv")
#60=meta(#61,#62)
#64=attribute("name","reference")
#65=attribute("content","HelloWorldProgramOutput.wrl")
#63=meta(#64,#65)
#67=attribute("name","reference")
#68=attribute("content","HelloWorldProgramOutput.html")
#66=meta(#67,#68)
#70=attribute("name","X3dValidator")
#71=attribute("content","https://savage.nps.edu/X3dValidator?url=http://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d")
#69=meta(#70,#71)
#73=attribute("name","identifier")
#74=attribute("content","http://www.web3d.org/specifications/java/examples/HelloWorldProgramOutput.x3d")
#72=meta(#73,#74)
#76=attribute("name","license")
#77=attribute("content","../license.html")
#75=meta(#76,#77)
#79=attribute("name","SpecialTest")
#80=attribute("content","tested sat: name value cannot contain embedded space character")
#78=meta(#79,#80)
#82=attribute("name","translated")
#83=attribute("content","31 January 2018")
#81=meta(#82,#83)
#85=attribute("name","generator")
#86=attribute("content","X3dToJson.xslt, http://www.web3d.org/x3d/stylesheets/X3dToJson.html")
#84=meta(#85,#86)
#88=attribute("name","reference")
#89=attribute("content","X3D JSON encoding: http://www.web3d.org/wiki/index.php/X3D_JSON_Encoding")
#87=meta(#88,#89)
#6=head(" comment #1 "," comment #2 "," comment #3 "," comment #4 ",#7,#10,#13,#17,#21,#24,#27,#30,#33,#36,#39,#42,#45,#48,#51,#54,#57,#60,#63,#66,#69,#72,#75,#78,#81,#84,#87)
#92=attribute("description","Available viewpoints")
#94=attribute("DEF","DefaultView")
#95=attribute("description","Hello X3DJSAIL")
#93=Viewpoint(#94,#95)
#97=attribute("DEF","TopDownView")
#98=attribute("description","top-down view from above")
#99=attribute("orientation","1","0","0","-1.570796")
#100=attribute("position","0","100","0")
#96=Viewpoint(#97,#98,#99,#100)
#91=ViewpointGroup(#92,#93,#96)
#102=attribute("DEF","WorldInfoDEF")
#103=attribute("title","HelloWorldProgram produced by X3D Java SAI Library (X3DJSAIL)")
#101=WorldInfo(#102,#103)
#105=attribute("USE","WorldInfoDEF")
#104=WorldInfo(#105)
#107=attribute("USE","WorldInfoDEF")
#106=WorldInfo(#107)
#109=attribute("name","test")
#110=attribute("DEF","scene.addChildMetadataObject")
#111=attribute("value","\"Top-level root Metadata node beneath Scene needs to be one of '-children' in JSON encoding\"")
#108=MetadataString(#109,#110,#111)
#113=attribute("DEF","scene.addChildLayerSetObjectTest")
#112=LayerSet(#113)
#115=attribute("DEF","LogoGeometryTransform")
#116=attribute("translation","0","1.5","0")
#118=attribute("description","select for X3D Java SAI Library (X3DJSAIL) description")
#119=attribute("url","\"../X3DJSAIL.html\"","\"http://www.web3d.org/specifications/java/X3DJSAIL.html\"")
#121=attribute("DEF","BoxShape")
#123=attribute("containerField","appearance")
#125=attribute("containerField","material")
#126=attribute("DEF","GreenMaterial")
#127=attribute("diffuseColor","0","1","1")
#128=attribute("emissiveColor","0.8","0","0")
#129=attribute("transparency","0.1")
#124=Material(#125,#126,#127,#128,#129)
#131=attribute("containerField","texture")
#132=attribute("url","\"images/X3dJavaSceneAccessInterfaceSaiLibrary.png\"","\"http://www.web3d.org/specifications/java/examples/images/X3dJavaSceneAccessInterfaceSaiLibrary.png\"")
#130=ImageTexture(#131,#132)
#122=Appearance(#123,#124,#130)
#134=attribute("containerField","geometry")
#135=attribute("DEF","test-NMTOKEN_regex.0123456789")
#136=attribute("class","untextured")
#133=Box(#134,#135,#136)
#120=Shape(#121,#122,#133)
#117=Anchor(#118,#119,#120)
#114=Transform(#115,#116,#117)
#138=attribute("DEF","LineShape")
#140=attribute("containerField","appearance")
#142=attribute("containerField","material")
#143=attribute("emissiveColor","0.6","0.19607843","0.8")
#141=Material(#142,#143)
#139=Appearance(#140,#141)
#145=attribute("containerField","geometry")
#146=attribute("coordIndex","0","1","2","3","4","0")
#148=attribute("containerField","coord")
#149=attribute("point","0","1.5","0","2","1.5","0","2","1.5","-2","-2","1.5","-2","-2","1.5","0","0","1.5","0")
#147=Coordinate(#148,#149)
#144=IndexedLineSet(#145,#146,#147)
#137=Shape(#138,#139,#144)
#151=attribute("DEF","BoxPathAnimator")
#152=attribute("key","0","0.125","0.375","0.625","0.875","1")
#153=attribute("keyValue","0","1.5","0","2","1.5","0","2","1.5","-2","-2","1.5","-2","-2","1.5","0","0","1.5","0")
#150=PositionInterpolator(#151,#152,#153)
#155=attribute("DEF","OrbitClock")
#156=attribute("cycleInterval","8.0")
#157=attribute("loop","true")
#154=TimeSensor(#155,#156,#157)
#159=attribute("fromField","fraction_changed")
#160=attribute("fromNode","OrbitClock")
#161=attribute("toField","set_fraction")
#162=attribute("toNode","BoxPathAnimator")
#158=ROUTE(#159,#160,#161,#162)
#164=attribute("fromField","value_changed")
#165=attribute("fromNode","BoxPathAnimator")
#166=attribute("toField","set_translation")
#167=attribute("toNode","LogoGeometryTransform")
#163=ROUTE(#164,#165,#166,#167)
#169=attribute("DEF","TextTransform")
#170=attribute("translation","0","-1.5","0")
#173=attribute("containerField","appearance")
#175=attribute("containerField","material")
#176=attribute("USE","GreenMaterial")
#174=Material(#175,#176)
#172=Appearance(#173,#174)
#178=attribute("containerField","geometry")
#179=attribute("string","\"X3D Java\"","\"SAI Library\"","\"X3DJSAIL\"")
#181=attribute("containerField","metadata")
#182=attribute("name","EscapedQuotationMarksMetadataSet")
#184=attribute("containerField","value")
#185=attribute("name","quotesTestC")
#186=attribute("value","\"MFString example C, backslash-escaped quotes: He said, \\"Immel did it!\\"\"")
#183=MetadataString(#184,#185,#186)
#188=attribute("containerField","value")
#189=attribute("name","extraChildTest")
#190=attribute("value","\"checks MetadataSetObject addValue() method\"")
#187=MetadataString(#188,#189,#190)
#180=MetadataSet(#181,#182,#183,#187)
#192=attribute("containerField","fontStyle")
#193=attribute("justify","\"MIDDLE\"","\"MIDDLE\"")
#191=FontStyle(#192,#193)
#177=Text(#178,#179," Comment example A, plain quotation marks: He said, \"Immel did it!\" "," Comment example B, XML character entities: He said, &quot;Immel did it!&quot; ",#180,#191)
#171=Shape(#172,#177)
#196=attribute("containerField","proxy")
#197=attribute("DEF","ProxyShape")
#199=attribute("containerField","geometry")
#200=attribute("string","\"One, Two, Three\"","\"\"","\"He said, \\"Immel did it!\\"\"")
#198=Text(#199,#200)
#195=Shape(#196,#197," alternative XML encoding: Text string='\"One, Two, Three\", \" \", \"He said, \\&quot;Immel did it!\\&quot;\"' "," alternative Java source: .setString(new String [] {\"One, Two, Three\", \" \", \"He said, \"Immel did it!\" \"}) "," reference: http://www.web3d.org/x3d/content/examples/Basic/X3dSpecifications/StringArrayEncodingExamplesIndex.html ",#198)
#194=Collision(" test containerField='proxy' ",#195)
#168=Transform(#169,#170,#171,#194," It's a beautiful world "," ... for you! "," https://en.wikipedia.org/wiki/Beautiful_World_(Devo_song) ")
#202=attribute("DEF","SpinInterpolator")
#203=attribute("key","0","0.5","1")
#204=attribute("keyValue","0","1","0","4.712389","0","1","0","0","0","1","0","1.5707964")
#201=OrientationInterpolator(#202,#203,#204)
#206=attribute("DEF","SpinClock")
#207=attribute("cycleInterval","5.0")
#208=attribute("loop","true")
#205=TimeSensor(#206,#207,#208)
#210=attribute("fromField","fraction_changed")
#211=attribute("fromNode","SpinClock")
#212=attribute("toField","set_fraction")
#213=attribute("toNode","SpinInterpolator")
#209=ROUTE(#210,#211,#212,#213)
#215=attribute("fromField","value_changed")
#216=attribute("fromNode","SpinInterpolator")
#217=attribute("toField","rotation")
#218=attribute("toNode","TextTransform")
#214=ROUTE(#215,#216,#217,#218)
#220=attribute("DEF","BackgroundGroup")
#222=attribute("DEF","GradualBackground")
#221=Background(#222)
#224=attribute("DEF","colorTypeConversionScript")
#226=attribute("name","colorInput")
#227=attribute("accessType","inputOnly")
#228=attribute("type","SFColor")
#225=field(#226,#227,#228)
#230=attribute("name","colorsOutput")
#231=attribute("accessType","outputOnly")
#232=attribute("type","MFColor")
#229=field(#230,#231,#232)
#223=Script(#224,#225,#229,"ecmascript: function colorInput (eventValue) // Example source code { colorsOutput = new MFColor(eventValue); // assigning value sends output event // Browser.print('colorInput=' + eventValue + ', colorsOutput=' + colorsOutput + '\n'); }")
#234=attribute("DEF","ColorAnimator")
#235=attribute("key","0","0.5","1")
#236=attribute("keyValue","0.9411765","1","1","0.29411766","0","0.50980395","0.9411765","1","1")
#233=ColorInterpolator(#234,#235,#236," AZURE to INDIGO and back again ")
#238=attribute("DEF","ColorClock")
#239=attribute("cycleInterval","60.0")
#240=attribute("loop","true")
#237=TimeSensor(#238,#239,#240)
#242=attribute("fromField","colorsOutput")
#243=attribute("fromNode","colorTypeConversionScript")
#244=attribute("toField","skyColor")
#245=attribute("toNode","GradualBackground")
#241=ROUTE(#242,#243,#244,#245)
#247=attribute("fromField","value_changed")
#248=attribute("fromNode","ColorAnimator")
#249=attribute("toField","colorInput")
#250=attribute("toNode","colorTypeConversionScript")
#246=ROUTE(#247,#248,#249,#250)
#252=attribute("fromField","fraction_changed")
#253=attribute("fromNode","ColorClock")
#254=attribute("toField","set_fraction")
#255=attribute("toNode","ColorAnimator")
#251=ROUTE(#252,#253,#254,#255)
#219=Group(#220,#221,#223,#233,#237,#241,#246,#251)
#257=attribute("name","ArtDeco01Material")
#258=attribute("appinfo","tooltip: ArtDeco01Material prototype is a Material node")
#261=attribute("name","description")
#262=attribute("accessType","inputOutput")
#263=attribute("appinfo","tooltip for descriptionField")
#264=attribute("type","SFString")
#265=attribute("value","ArtDeco01Material prototype is a Material node")
#260=field(#261,#262,#263,#264,#265)
#267=attribute("name","enabled")
#268=attribute("accessType","inputOutput")
#269=attribute("type","SFBool")
#270=attribute("value","true")
#266=field(#267,#268,#269,#270)
#259=ProtoInterface(#260,#266)
#273=attribute("ambientIntensity","0.25")
#274=attribute("diffuseColor","0.282435","0.085159","0.134462")
#275=attribute("shininess","0.127273")
#276=attribute("specularColor","0.276305","0.11431","0.139857")
#272=Material(#273,#274,#275,#276)
#278=attribute("description","within ProtoBody")
#281=attribute("nodeField","description")
#282=attribute("protoField","description")
#280=connect(#281,#282)
#284=attribute("nodeField","enabled")
#285=attribute("protoField","enabled")
#283=connect(#284,#285)
#279=IS(#280,#283)
#277=TouchSensor(#278,#279)
#271=ProtoBody(" Initial node of ProtoBody determines prototype node type ",#272," [HelloWorldProgram diagnostic] should be connected to scene graph: ArtDeco01ProtoDeclare.getNodeType()=\"Material\" "," presence of follow-on TouchSensor shows that additional nodes are allowed in ProtoBody after initial node, regardless of node types ",#277)
#256=ProtoDeclare(#257,#258,#259,#271)
#287=attribute("name","ArtDeco02Material")
#288=attribute("appinfo","this is a different Material node")
#289=attribute("url","\"http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3d#ArtDeco02Material\"","\"http://X3dGraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/ArtDecoPrototypesExcerpt.x3dv#ArtDeco02Material\"")
#291=attribute("name","description")
#292=attribute("accessType","inputOutput")
#293=attribute("appinfo","tooltip for descriptionField")
#294=attribute("type","SFString")
#290=field(#291,#292,#293,#294)
#286=ExternProtoDeclare(#287,#288,#289," [HelloWorldProgram diagnostic] ArtDeco02ExternProtoDeclare.getNodeType()=\"ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time, TODO X3DJSAIL needs to add further capability.\" ",#290)
#296=attribute("DEF","TestShape1")
#298=attribute("containerField","appearance")
#299=attribute("DEF","TestAppearance1")
#301=attribute("containerField","material")
#302=attribute("name","ArtDeco01Material")
#304=attribute("containerField","material")
#305=attribute("name","description")
#306=attribute("value","ArtDeco01Material can substitute for a Material node")
#303=fieldValue(#304,#305,#306)
#300=ProtoInstance(#301,#302," [HelloWorldProgram diagnostic] ArtDeco01ProtoInstance.getNodeType()=\"Material\" ",#303)
#297=Appearance(#298,#299," ArtDeco01Material prototype goes here... TODO ensure setContainerField is handled in exported Java ",#300)
#308=attribute("containerField","geometry")
#309=attribute("radius","0.001")
#307=Sphere(#308,#309)
#295=Shape(#296,#297,#307)
#311=attribute("DEF","TestShape2")
#313=attribute("containerField","appearance")
#314=attribute("DEF","TestAppearance2")
#316=attribute("containerField","material")
#317=attribute("name","ArtDeco02Material")
#318=attribute("DEF","ArtDeco02MaterialDEF")
#320=attribute("containerField","material")
#321=attribute("name","description")
#322=attribute("value","ArtDeco02Material can substitute for another Material node")
#319=fieldValue(#320,#321,#322)
#315=ProtoInstance(#316,#317,#318," [HelloWorldProgram diagnostic] ArtDeco02ProtoInstance.getNodeType()=\"ERROR_UNKNOWN_EXTERNPROTODECLARE_NODE_TYPE: ExternProtoDeclare name='ArtDeco02Material' type cannot be remotely accessed at run time, TODO X3DJSAIL needs to add further capability.\" ",#319)
#312=Appearance(#313,#314," ArtDeco02Material prototype goes here... TODO ensure setContainerField is handled in exported Java ",#315)
#324=attribute("containerField","geometry")
#325=attribute("bottomRadius","0.001")
#326=attribute("height","0.001")
#323=Cone(#324,#325,#326)
#310=Shape(#311,#312,#323)
#328=attribute("DEF","TestShape3")
#330=attribute("containerField","appearance")
#331=attribute("DEF","TestAppearance3")
#333=attribute("containerField","material")
#334=attribute("USE","ArtDeco02MaterialDEF")
#332=ProtoInstance(#333,#334)
#329=Appearance(#330,#331," ArtDeco02Material ProtoInstance USE goes here... ",#332)
#336=attribute("containerField","geometry")
#337=attribute("height","0.001")
#338=attribute("radius","0.001")
#335=Cylinder(#336,#337,#338)
#327=Shape(#328,#329,#335)
#340=attribute("DEF","inlineSceneDef")
#341=attribute("url","\"someOtherScene.x3d\"")
#339=Inline(#340,#341)
#343=attribute("AS","WorldInfoDEF2")
#344=attribute("importedDEF","WorldInfoDEF")
#345=attribute("inlineDEF","inlineSceneDef")
#342=IMPORT(#343,#344,#345)
#347=attribute("AS","WorldInfoDEF3")
#348=attribute("localDEF","WorldInfoDEF")
#346=EXPORT(#347,#348)
#350=attribute("name","MaterialModulator")
#351=attribute("appinfo","mimic a Material node and modulate fields as an animation effect")
#352=attribute("documentation","http://x3dgraphics.com/examples/X3dForWebAuthors/Chapter14Prototypes/MaterialModulatorIndex.html")
#355=attribute("name","enabled")
#356=attribute("accessType","inputOutput")
#357=attribute("type","SFBool")
#358=attribute("value","true")
#354=field(#355,#356,#357,#358)
#360=attribute("name","diffuseColor")
#361=attribute("accessType","inputOutput")
#362=attribute("type","SFColor")
#363=attribute("value","0","0","0")
#359=field(#360,#361,#362,#363)
#365=attribute("name","emissiveColor")
#366=attribute("accessType","inputOutput")
#367=attribute("type","SFColor")
#368=attribute("value","0.05","0.05","0.5")
#364=field(#365,#366,#367,#368)
#370=attribute("name","specularColor")
#371=attribute("accessType","inputOutput")
#372=attribute("type","SFColor")
#373=attribute("value","0","0","0")
#369=field(#370,#371,#372,#373)
#375=attribute("name","transparency")
#376=attribute("accessType","inputOutput")
#377=attribute("type","SFFloat")
#378=attribute("value","0.0")
#374=field(#375,#376,#377,#378)
#380=attribute("name","shininess")
#381=attribute("accessType","inputOutput")
#382=attribute("type","SFFloat")
#383=attribute("value","0.0")
#379=field(#380,#381,#382,#383)
#385=attribute("name","ambientIntensity")
#386=attribute("accessType","inputOutput")
#387=attribute("type","SFFloat")
#388=attribute("value","0.0")
#384=field(#385,#386,#387,#388)
#353=ProtoInterface(#354,#359,#364,#369,#374,#379,#384)
#391=attribute("DEF","MaterialNode")
#394=attribute("nodeField","diffuseColor")
#395=attribute("protoField","diffuseColor")
#393=connect(#394,#395)
#397=attribute("nodeField","emissiveColor")
#398=attribute("protoField","emissiveColor")
#396=connect(#397,#398)
#400=attribute("nodeField","specularColor")
#401=attribute("protoField","specularColor")
#399=connect(#400,#401)
#403=attribute("nodeField","transparency")
#404=attribute("protoField","transparency")
#402=connect(#403,#404)
#406=attribute("nodeField","shininess")
#407=attribute("protoField","shininess")
#405=connect(#406,#407)
#409=attribute("nodeField","ambientIntensity")
#410=attribute("protoField","ambientIntensity")
#408=connect(#409,#410)
#392=IS(#393,#396,#399,#402,#405,#408)
#390=Material(#391,#392)
#412=attribute("DEF","MaterialModulatorScript")
#414=attribute("name","enabled")
#415=attribute("accessType","inputOutput")
#416=attribute("type","SFBool")
#413=field(#414,#415,#416)
#418=attribute("name","diffuseColor")
#419=attribute("accessType","inputOutput")
#420=attribute("type","SFColor")
#417=field(#418,#419,#420)
#422=attribute("name","newColor")
#423=attribute("accessType","outputOnly")
#424=attribute("type","SFColor")
#421=field(#422,#423,#424)
#426=attribute("name","clockTrigger")
#427=attribute("accessType","inputOnly")
#428=attribute("type","SFTime")
#425=field(#426,#427,#428)
#431=attribute("nodeField","enabled")
#432=attribute("protoField","enabled")
#430=connect(#431,#432)
#434=attribute("nodeField","diffuseColor")
#435=attribute("protoField","diffuseColor")
#433=connect(#434,#435)
#429=IS(#430,#433)
#411=Script(#412,#413,#417,#421,#425,#429,"ecmascript: function initialize () { newColor = diffuseColor; // start with correct color } function set_enabled (newValue) { enabled = newValue; } function clockTrigger (timeValue) { if (!enabled) return; red = newColor.r; green = newColor.g; blue = newColor.b; // note different modulation rates for each color component, % is modulus operator newColor = new SFColor ((red + 0.02) % 1, (green + 0.03) % 1, (blue + 0.04) % 1); if (enabled) { Browser.print ('diffuseColor=(' + red + ',' + green + ',' + blue + ') newColor=' + newColor.toString() + '\n'); } }")
#389=ProtoBody(#390," Only first node (the node type) is renderable, others are along for the ride ",#411)
#349=ProtoDeclare(#350,#351,#352,#353,#389)
#437=attribute("DEF","DeclarativeGroupExample")
#440=attribute("containerField","metadata")
#441=attribute("name","findThisNameValue")
#442=attribute("DEF","FindableMetadataStringTest")
#443=attribute("value","\"test case\"")
#439=MetadataString(#440,#441,#442,#443)
#445=attribute("containerField","appearance")
#446=attribute("DEF","DeclarativeAppearanceExample")
#448=attribute("containerField","material")
#449=attribute("name","MaterialModulator")
#450=attribute("DEF","MyMaterialModulator")
#447=ProtoInstance(#448,#449,#450)
#444=Appearance(#445,#446," DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance ",#447)
#452=attribute("containerField","geometry")
#453=attribute("bottom","false")
#454=attribute("bottomRadius","0.05")
#455=attribute("height","0.1")
#451=Cone(#452,#453,#454,#455)
#438=Shape(#439,#444,#451)
#436=Group(#437,#438," Test success: declarativeGroup.addChild() singleton pipeline method ")
#457=attribute("DEF","TestFieldObjectsGroup")
#456=Group(#457," testFieldObjects() results "," SFBool default=true, true=true, false=false, negate()=true "," MFBool default=, initial=true false true, negate()=false true false "," SFFloat default=0.0, initial=1.0, setValue(2)=2.0, setValue(3.0f)=3.0, setValue(4.0)=4.0 "," MFFloat default=, initial=1 2 3, append(5)=1 2 3 5, inserts(3,4)(0,0)=0 1 2 3 4 5, append(6)=0 1 2 3 4 5 6, size()=7 "," ... get1Value[3]=3.0, remove[1]=0 2 3 4 5 6, set1Value(0,10)=10 2 3 4 5 6, multiply(2)=20 4 6 8 10 12, clear= "," SFVec3f default=0 0 0, initial=1 2 3, setValue=4 5 6, multiply(2)=8 10 12, normalize()=0.45584232 0.5698029 0.68376344 ")
#459=attribute("location","0","1.6","0")
#461=attribute("containerField","source")
#462=attribute("description","chimes")
#463=attribute("url","\"chimes.wav\"","\"http://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/chimes.wav\"")
#460=AudioClip(#461,#462,#463," Scene example fragment from http://www.web3d.org/x3d/content/examples/ConformanceNist/Sounds/AudioClip/default.x3d ")
#458=Sound(#459," set sound-ellipsoid location height at 1.6m to match typical avatar height ",#460)
#465=attribute("location","0","1.6","0")
#467=attribute("containerField","source")
#468=attribute("description","mpgsys.mpg from ConformanceNist suite")
#469=attribute("url","\"mpgsys.mpg\"","\"http://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpgsys.mpg\"")
#466=MovieTexture(#467,#468,#469," Scene example fragment from http://www.web3d.org/x3d/content/examples/ConformanceNist/Appearance/MovieTexture/mpeg1-systems.x3d "," Expected containerField='source', allowed containerField values=\"texture\" \"source\" \"back\" \"bottom\" \"front\" \"left\" \"right\" \"top\" \"backTexture\" \"bottomTexture\" \"frontTexture\" \"leftTexture\" \"rightTexture\" \"topTexture\" ")
#464=Sound(#465," set sound-ellipsoid location height at 1.6m to match typical avatar height ",#466)
#471=attribute("DEF","ExtrusionShape")
#473=attribute("containerField","appearance")
#474=attribute("DEF","TransparentAppearance")
#476=attribute("containerField","material")
#477=attribute("transparency","1.0")
#475=Material(#476,#477)
#472=Appearance(#473,#474,#475)
#479=attribute("containerField","geometry")
#480=attribute("DEF","ExampleExtrusion")
#478=Extrusion(#479,#480)
#470=Shape(#471," ExampleExtrusion isCrossSectionClosed()=true, crossSection='[1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0]' "," ExampleExtrusion isSpineClosed()=false, spine='[0.0, 0.0, 0.0, 0.0, 1.0, 0.0]' ",#472,#478)
#90=Scene(#91,#101,#104,#106,#108,#112,#114,#137,#150,#154,#158,#163,#168," repeatedly spin 180 degrees as a readable special effect ",#201,#205,#209,#214,#219,#256,#286," Tested ArtDeco01ProtoInstance, ArtDeco02ProtoInstance for improper node type when ProtoInstance is added in wrong place ",#295,#310,#327,#339,#342,#346,#349," Test success: declarative statement createDeclarativeShapeTests() ",#436," Test success: declarative statement addChild() "," Test success: x3dModel.findNodeByDEF(DeclarativeAppearanceExample) = <Appearance DEF='DeclarativeAppearanceExample'/> i.e. <Appearance DEF='DeclarativeAppearanceExample'> <!- - DeclarativeMaterialExample gets overridden by subsequently added MaterialModulator ProtoInstance - -> <ProtoInstance DEF='MyMaterialModulator' name='MaterialModulator' containerField='material'/> </Appearance> "," Test success: x3dModel.findElementByNameValue(findThisNameValue) = <MetadataString DEF='FindableMetadataStringTest' name='findThisNameValue' value='\"test case\"'/> "," Test success: x3dModel.findElementByNameValue(\"ArtDeco01Material\", \"ProtoDeclare\") found "," Test success: x3dModel.findElementByNameValue(\"MaterialModulator\", \"ProtoDeclare\") found "," Test success: x3dModel.findElementByNameValue(\"MaterialModulator\", \"ProtoInstance\") found ",#456,#458,#464," Test success: AnchorObject.isNode()=true, siteAnchor.isNode()=true "," Test success: AnchorObject.isStatement()=false, siteAnchor.isStatement()=false "," Test success: ROUTEObject.isNode()=false, orbitPositionROUTE.isNode()=false "," Test success: ROUTEObject.isStatement()=true, orbitPositionROUTE.isStatement()=true "," Test success: CommentsBlock.isNode()=false, testComments.isNode()=false "," Test failure: CommentsBlock.isStatement()=true, testComments.isStatement()=true ",#470)
#1=X3D(#2,#3,#4,#5,#6,#90)
#0=X3D(#1)

